<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Can, | Car Diagnostics of the Future]]></title>
  <link href="http://esrlabs.github.io/esrdiag/blog/categories/can/atom.xml" rel="self"/>
  <link href="http://esrlabs.github.io/esrdiag/"/>
  <updated>2014-10-08T07:22:06+02:00</updated>
  <id>http://esrlabs.github.io/esrdiag/</id>
  <author>
    <name><![CDATA[Oliver Mueller, Christian Ahrens, Eugen Lau, Martin Thiede and more...]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Making It Better]]></title>
    <link href="http://esrlabs.github.io/esrdiag/blog/2014/10/08/making-it-better/"/>
    <updated>2014-10-08T07:01:41+02:00</updated>
    <id>http://esrlabs.github.io/esrdiag/blog/2014/10/08/making-it-better</id>
    <content type="html"><![CDATA[<h2>The Situation</h2>

<p>Most of us have the need to get access to the bus systems of the car like CAN or LIN or Ethernet.
We know about the protocols, about the data layouts and about the problems of those systems. It is
immensely important to be able to diagnose those systems:</p>

<ul>
<li>track messages on different buses</li>
<li>inject messages ourselves</li>
<li>build and use higher level protocols</li>
</ul>


<p>Currently the turn-to solution is mostly based on Vector HW and on a mixture of Vector tools and the
infamous &ldquo;Diagnoser&rdquo;, a product that was in part developed by ESRLabs employees at BMW CarIT.</p>

<h2>The Problem</h2>

<p>To use the existing tools, expensive HW has to be purchased and inferior software has to be used.
And support is only available on Windows systems. But we often need functionality that exceeds what
is available to us. And we need to use those tools not only on Windows platforms, but also on
Linux/Mac or even mobile phones.</p>

<h2>The Solution</h2>

<p>Some of us already have been playing around with homegrown solutions to the problem:</p>

<ul>
<li>Ethernet based tools (easier to deal with &lsquo;cause they are platform independent)</li>
<li>Javascript/Java/Ruby/Lua interfaces to existing Vector CAN HW</li>
</ul>


<p>Recently another approach came up that got our attention: building our own hardware!</p>

<p>The idea is to build our own hardware with all the capabilities we need (CAN, LIN and Ethernet to
start out with). And of course also write the software for this device. We already have a lot of the
software stacks that we need (CAN, CAN TP, LIN, LIN TP, Ethernet driver, Diagnostic Framework).
Making those stacks accessible and running our software on the device itself will get rid of the
need to install drivers for different OS.</p>

<p>The user-interface will be based on the browser which is available on every platform. Of course we
want a way to easily extend our functionality. Therefore we want to make use of some kind of
scripting language that can easily be deployed to the target.</p>

<h2>The Project</h2>

<p>We want to start out</p>

<ul>
<li>building our hardware</li>
<li>setting up a basic system based on basic software components available to us</li>
<li>build a web-based UI in form of a rich client (see <a href="https://angularjs.org/">AngularJS</a>)</li>
<li>chose and embed a suitable scripting language (lua, ruby, javascript&hellip;)</li>
<li>build and setup a developer environment for a potential community (webpage, tutorials, examples,
testcode, teaser-videos ) similar to <a href="https://tessel.io/">tessel.io</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
